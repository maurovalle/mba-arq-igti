version: '3'
services:
  zookeeper:
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - "2181:2181"
      - "39999:39999"
    environment:
      java.rmi.server.hostname: ${DOCKER_HOST_IP:-127.0.0.1}
      com.sun.management.jmxremote.local.only: false
      com.sun.management.jmxremote.rmi.port: 39999
      com.sun.management.jmxremote.port: 39999
      com.sun.management,jmxremote.authenticate: false
      com.sun.management.jmxremote.ssl: false
      KAFKA_JMX_PORT: 39999
      JMXPORT: 39999
      JMX_PORT: 39999
      JMX_HOST: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog
  kafka1:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9091:9091"
      - "49999:49999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 49999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      JMXPORT: 49999
      JMX_PORT: 49999
      JMX_HOST: ${DOCKER_HOST_IP:-127.0.0.1}
      java.rmi.server.hostname: ${DOCKER_HOST_IP:-127.0.0.1}
      com.sun.management.jmxremote.local.only: false
      com.sun.management.jmxremote.rmi.port: 49999
      com.sun.management.jmxremote.port: 49999
      com.sun.management,jmxremote.authenticate: false
      com.sun.management.jmxremote.ssl: false
    volumes:
      - ./data/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19091"
    depends_on:
      - kafka1
  node_producer:
    image: "node:16"
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ../nodejs/producer:/home/node/app
    expose:
      - "8081"
    command: "npm producer.js getting-started.properties"
    depends_on: 
      - kafka1
  node_consumer:
    image: "node:16"
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ../nodejs/consumer:/home/node/app
    expose:
      - "8088"
    command: "npm consumer.js getting-started.properties"
    depends_on: 
      - node_producer


#Sobre o Zookeeper: https://dattell.com/data-architecture-blog/what-is-zookeeper-how-does-it-support-kafka/
#Detalhes das vari√°veis de ambiente:
#Zookeper: https://hub.docker.com/_/zookeeper
#Kafka: https://docs.confluent.io/platform/current/kafka/multi-node.html
#Kafdrop: https://github.com/obsidiandynamics/kafdrop
